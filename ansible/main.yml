- hosts: all

  vars:
    repos:
      - alfalfa
      - bash-it
      - pivotal_ide_prefs
      - vim-config

  tasks:

    - name: Ensure that the .ssh directory exists
      file: path=~/.ssh state=directory

    - name: Ensure that the known_hosts file exists
      file: path=~/.ssh/known_hosts state=touch

    # NOTE: This (sort of) loses unpushed commits. See https://github.com/ansible/ansible-modules-core/issues/614 for details,
    # but if this happens to you, use `git reflog` to retrieve them.
    - name: Update Alfalfa and child repos
      git:
        repo: https://github.com/seattle-beach/{{ item }}.git
        dest: ~/workspace/{{ item }}
      ignore_errors: yes # Ignore dirty repos
      with_items: "{{ repos }}"

    - name: Set SSH push remotes for repos
      command: git remote set-url --push origin git@github.com:seattle-beach/{{ item }}.git
      args:
        chdir: ~/workspace/{{ item }}
      with_items: "{{ repos }}"

    - name: Set upstreams for repos
      shell: git remote show upstream || git remote add upstream https://github.com/{{ item.value }}/{{ item.key }}.git
      args:
        chdir: ~/workspace/{{ item.key }}
      ignore_errors: yes
      with_dict:
        "bash-it": Bash-it
        pivotal_ide_prefs: pivotal
        "vim-config": pivotal

    - include: sudo.yml
    - name: Install Homebrew
      shell: /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" < /dev/null
      args:
        creates: /usr/local/bin/brew
      when: ansible_os_family == "Darwin"

    - name: Symlink config files
      file: src=~/workspace/alfalfa/dotfiles/{{ item }} dest=~/{{ item }} state=link
      with_items:
        - .bash_profile
        - .bundle
        - .gemrc
        - .git-authors
        - .gitconfig
        - .gitignore_global

    - name: Symlink .pairs
      file: src=~/.git-authors dest=~/.pairs state=link

    - name: Symlink child repositories
      file: src=~/workspace/{{ item.key }} dest={{ item.value }} state=link
      with_dict:
        bash-it: ~/.bash_it
        vim-config: ~/.vim
        vim-config/vimrc: ~/.vimrc

    - name: Install Vundle
      git:
        repo: https://github.com/VundleVim/Vundle.vim.git
        dest: ~/.vim/bundle/Vundle.vim
    - name: Install Vundle plugins
      command: vim +PluginInstall +redraw +qall

    - name: Tap Homebrew repositories
      homebrew_tap: tap={{ item }}
      with_items:
        - caskroom/fonts
        - cloudfoundry/tap
        - git-duet/tap
        - pivotal/tap
      when: ansible_os_family == "Darwin"

    - name: Update Homebrew
      homebrew: update_homebrew=yes
      when: ansible_os_family == "Darwin"

    #- include: cf_cli.yml
    #  when: ansible_os_family == "Debian"

    - name: Install Homebrew formulae
      homebrew: name={{ item }}
      with_items:
        - ag
        - ansible
        - cf-cli
        - cowsay
        - direnv
        - git
        - git-duet
        - git-pair
        - golang
        - gti
        - node
        - openssl
        - rbenv
        - tmux
        - tree
        - watch
      when: ansible_os_family == "Darwin"
    - name: Ensure python-apt is installed
      command: >
        apt-get install python-apt -y -q
        creates=/usr/share/doc/python-apt
      sudo: yes
      when: ansible_os_family == "Debian"

    - name: Install Apt repos
      apt_repository: repo={{ item }} state=present update_cache=yes
      with_items:
        - "ppa:ansible/ansible"
        - "deb http://archive.canonical.com/ubuntu {{ ansible_distribution_release }} partner"
      sudo: yes
      when: ansible_os_family == "Debian"

    - include: sudo.yml
    - name: Install Apt formulae
      apt: name={{ item }} state=latest
      with_items:
        - software-properties-common
        - ansible
        - build-essential
        - cowsay
        - direnv
        - git
        - golang
        - google-chrome-stable
        - openssl
        - rbenv
        - silversearcher-ag
        - tmux
        - tree
      sudo: yes
      when: ansible_os_family == "Debian"

    - include: sudo.yml
    - name: Install Homebrew casks
      homebrew_cask: name={{ item }}
      with_items:
        - flycut
        - font-hack
        - font-sauce-code-powerline
        - font-source-code-pro
        - google-chrome
        - google-drive
        - iterm2
        - lastpass
        - macvim
        - shiftit
        - slack
        - sublime-text
        - postman
      when: ansible_os_family == "Darwin"

    - name: Install gi
      get_url: url=https://github.com/sgravrock/gi/releases/download/0.0.1/gi-0.0.1-macosx dest=/usr/local/bin/gi mode=0755
      when: ansible_os_family == "Darwin"

    - name: Create LaunchAgents dir
      file: path=~/Library/LaunchAgents state=directory
      when: ansible_os_family == "Darwin"

    - name: Update OS X defaults
      my_defaults:
        domain: "{{ item.domain | default(omit) }}"
        key: "{{ item.key }}"
        type: "{{ item.type }}"
        value: "{{ item.value }}"
      with_items:
        - # Autohide the Dock
          domain: com.apple.dock
          key: autohide
          type: bool
          value: true
        - # Put the Dock on the left
          domain: com.apple.dock
          key: orientation
          type: string
          value: left
        - # keyboard repeat rate
          key: KeyRepeat
          type: int
          value: 1
        - # delay before keyboard repeat
          key: InitialKeyRepeat
          type: int
          value: 15
        - # Function keys are F keys
          domain: com.apple.keyboard
          key: fnState
          type: bool
          value: true
        - # Show date with time in menu bar
          domain: com.apple.menuextra.clock
          key: DateFormat
          type: string
          value: EEE MMM d  h:mm a
        - # show scissors for flycut icon
          domain: com.generalarcade.flycut
          key: menuIcon
          type: int
          value: 3
      when: ansible_os_family == "Darwin"

    - name: Check if Terminal profile has been imported
      command: defaults read com.apple.Terminal "Window Settings"
      register: terminal_window_settings
      when: ansible_os_family == "Darwin"
    - name: Import Terminal profile
      command: open ~/workspace/alfalfa/dotfiles/Pivotal.terminal
      when: 
        - ansible_os_family == "Darwin"
        - terminal_window_settings.stdout.find('Pivotal') == -1

    - name: Set terminal profile to be the default
      my_defaults:
        domain: com.apple.Terminal
        key: "{{ item }} Window Settings"
        type: string
        value: Pivotal
      with_items:
        - Default
        - Startup
      when: ansible_os_family == "Darwin"

    - name: Install dockutil
      homebrew: name=dockutil
      when: ansible_os_family == "Darwin"
    - name: Remove all icons from the Dock
      command: dockutil --remove all
      environment:
        PATH: "/usr/local/bin:/Users/{{ ansible_env.USER }}/.rbenv/shims:{{ ansible_env.PATH }}"
      when: ansible_os_family == "Darwin"
    - name: Uninstall dockutil
      homebrew: name=dockutil state=absent
      when: ansible_os_family == "Darwin"
    - name: Restart the Dock
      command: killall Dock
      ignore_errors: yes
      when: ansible_os_family == "Darwin"

    - name: Set login items
      command: ~/workspace/alfalfa/bin/addLoginItem /Applications/{{ item }}.app
      become: yes
      become_user: "{{ ansible_env.USER }}"
      with_items:
        - Flycut
        - ShiftIt
      when: ansible_os_family == "Darwin"

    - name: Check if ShiftIt is enabled in Accessibility whitelist
      shell: echo "SELECT allowed FROM access WHERE client = 'org.shiftitapp.ShiftIt';" | sqlite3 /Library/Application\ Support/com.apple.TCC/TCC.db
      become: yes
      register: shiftit_out
      when: ansible_os_family == "Darwin"
    - name: Add ShiftIt to Accessibility whitelist
      shell: echo "INSERT INTO access VALUES('kTCCServiceAccessibility','org.shiftitapp.ShiftIt',0,1,1,NULL,NULL);" | sqlite3 /Library/Application\ Support/com.apple.TCC/TCC.db
      become: yes
      when: 
        - ansible_os_family == "Darwin"
        - not shiftit_out.stdout
    - name: Enable ShiftIt in Accessiblity whitelist
      shell: echo "UPDATE access SET allowed = 1 WHERE client = 'org.shiftitapp.ShiftIt';" | sqlite3 /Library/Application\ Support/com.apple.TCC/TCC.db
      become: yes
      when: 
        - ansible_os_family == "Darwin"
        - shiftit_out.stdout and shiftit_out.stdout != "1"

    - name: Start OS X apps
      shell: pgrep "{{ item.key }}" || open -a "{{ item.value }}"
      with_dict:
        ShiftIt: ShiftIt.app
        Flycut: Flycut.app
      when: ansible_os_family == "Darwin"

- include: ssh.yml
