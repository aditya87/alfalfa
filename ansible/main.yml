- hosts: all
  environment:
    PATH: "/usr/local/bin:/Users/{{ ansible_env.USER }}/.rbenv/shims:{{ ansible_env.PATH }}"
  tasks:
    - name: Authenticate sudo for Homebrew installation
      ping:
      become: yes

    - name: Install Homebrew
      shell: /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" < /dev/null
      args:
        creates: /usr/local/bin/brew

    - name: Clone Alfalfa
      git:
        repo: https://github.com/seattle-beach/alfalfa.git
        dest: ~/.alfalfa

    - name: Clean up existing config files
      command: mv {{ item }} {{ item }}.orig
      args:
        creates: "{{ item }}.orig"
      with_items:
        - ~/.bash_profile

    - name: Symlink config files
      file: src=~/.alfalfa/dotfiles/{{ item.key }} dest={{ item.value }} state=link
      with_dict:
        .bash_profile: ~/.bash_profile
        .gemrc: ~/.gemrc
        .git-authors: ~/.git-authors
        .gitconfig: ~/.gitconfig
        .gitignore_global: ~/.gitignore_global

    - name: Symlink .pairs
      file: src=~/.git-authors dest=~/.pairs state=link

    - name: Symlink submodules
      file: src=~/.alfalfa/modules/{{ item.key }} dest={{ item.value }} state=link
      with_dict:
        bash-it: ~/.bash_it
        vim-config: ~/.vim
        vim-config/vimrc: ~/.vimrc

    - name: Install Vundle
      git:
       repo: https://github.com/VundleVim/Vundle.vim.git
       dest: ~/.vim/bundle/Vundle.vim
    - name: Install Vundle plugins
      command: vim +PluginInstall +redraw +qall

    - name: Tap Homebrew repositories
      homebrew_tap: tap={{ item }}
      with_items:
        - caskroom/fonts
        - cloudfoundry/tap
        - git-duet/tap
        - pivotal/tap

    - name: Update Homebrew
      homebrew: update_homebrew=yes

    - name: Install Homebrew formulae
      homebrew: name={{ item }}
      with_items:
        - cf-cli
        - direnv
        - git-duet
        - git-pair
        - postgresql
        - rbenv
        - tmux
        - watch

    - name: Authenticate sudo for app installations
      ping:
      become: yes

    - name: Install Homebrew casks
      homebrew_cask: name={{ item }}
      with_items:
        - flycut
        - font-hack
        - font-source-code-pro
        - google-chrome
        - intellij-idea
        - iterm2
        - macvim
        - rubymine
        - shiftit

    - name: Update OS X defaults
      osx_defaults: domain={{ item.domain }} key={{ item.key }} type={{ item.type }} value={{ item.value }}
      with_items:
        - domain: com.apple.Terminal
          key: Default Window Settings
          type: string
          value: Pro
        - domain: com.apple.Terminal
          key: Startup Window Settings
          type: string
          value: Pro

    - name: Create ~/workspace
      file: path=~/workspace state=directory

    - name: Create LaunchAgents dir
      file: path=~/Library/LaunchAgents state=directory
    - name: Get Postgres launch agents
      shell: ls /usr/local/opt/postgresql/*.plist
      register: postgres_launch_agents
    - name: Link Postgres launch agents
      file: src={{ item }} dest=~/Library/LaunchAgents/{{ item | basename }} state=link
      with_items: "{{ postgres_launch_agents.stdout_lines }}"

    - name: Install Ruby 2.2.4
      command: rbenv install 2.2.4
      args:
        creates: ~/.rbenv/versions/2.2.4
    - name: Use Ruby 2.2.4
      shell: rbenv global 2.2.4 && rbenv rehash
    - name: Install Ruby gems
      command: gem install bundler

    - name: Install Pivotal IDE prefs
      command: ./bin/ide_prefs --ide={{ item }} install
      args:
        chdir: ~/.alfalfa/modules/pivotal_ide_prefs/cli
      with_items:
        - intellij
        - rubymine

    - name: Set login items
      command: ~/.alfalfa/bin/addLoginItem ~/Applications/{{ item }}.app
      become: yes
      become_user: "{{ ansible_env.USER }}"
      with_items:
        - Flycut
        - ShiftIt

    - name: Check if ShiftIt is enabled in Accessibility whitelist
      shell: echo "SELECT allowed FROM access WHERE client = 'org.shiftitapp.ShiftIt';" | sqlite3 /Library/Application\ Support/com.apple.TCC/TCC.db
      become: yes
      register: shiftit_out
    - name: Add ShiftIt to Accessibility whitelist
      shell: echo "INSERT INTO access VALUES('kTCCServiceAccessibility','org.shiftitapp.ShiftIt',0,1,1,NULL);" | sqlite3 /Library/Application\ Support/com.apple.TCC/TCC.db
      become: yes
      when: not shiftit_out.stdout
    - name: Enable ShiftIt in Accessiblity whitelist
      shell: echo "UPDATE access SET allowed = 1 WHERE client = 'org.shiftitapp.ShiftIt';" | sqlite3 /Library/Application\ Support/com.apple.TCC/TCC.db
      become: yes
      when: shiftit_out.stdout and shiftit_out.stdout != "1"
