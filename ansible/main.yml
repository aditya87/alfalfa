- hosts: all
  # environment:
  #   PATH: "/usr/local/bin:/Users/{{ ansible_env.USER }}/.rbenv/shims:{{ ansible_env.PATH }}"

  tasks:
    - name: Ensure that the .ssh directory exists
      file: path=~/.ssh state=directory

    - name: Ensure that the known_hosts file exists
      file: path=~/.ssh/known_hosts state=touch

    - name: Clone Alfalfa and child repos
      git:
        repo: https://github.com/seattle-beach/{{ item }}.git
        dest: ~/workspace/{{ item }}
      ignore_errors: yes # Ignore dirty repos
      with_items:
        - alfalfa
        - bash-it
        - pivotal_ide_prefs
        - vim-config

    - name: Authenticate sudo for Homebrew installation
      ping:
      become: yes

    - name: Install Homebrew
      shell: /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" < /dev/null
      args:
        creates: /usr/local/bin/brew

    - name: Symlink config files
      file: src=~/workspace/alfalfa/dotfiles/{{ item }} dest=~/{{ item }} state=link
      with_items:
        - .bash_profile
        - .bundle
        - .gemrc
        - .git-authors
        - .gitconfig
        - .gitignore_global

    - name: Symlink .pairs
      file: src=~/.git-authors dest=~/.pairs state=link

    - name: Symlink child repositories
      file: src=~/workspace/{{ item.key }} dest={{ item.value }} state=link
      with_dict:
        bash-it: ~/.bash_it
        vim-config: ~/.vim
        vim-config/vimrc: ~/.vimrc

    - name: Install Vundle
      git:
       repo: https://github.com/VundleVim/Vundle.vim.git
       dest: ~/.vim/bundle/Vundle.vim
    - name: Install Vundle plugins
      command: vim +PluginInstall +redraw +qall

    - name: Tap Homebrew repositories
      homebrew_tap: tap={{ item }}
      with_items:
        - caskroom/fonts
        - cloudfoundry/tap
        - git-duet/tap
        - pivotal/tap

    - name: Update Homebrew
      homebrew: update_homebrew=yes

    - name: Install Homebrew formulae
      homebrew: name={{ item }}
      with_items:
        - ag
        # - android
        - ansible
        - cf-cli
        - cowsay
        - direnv
        - git
        - git-duet
        - git-pair
        - golang
        - gti
        - node
        - postgresql
        - rbenv
        - tmux
        - watch

    - name: Authenticate sudo for app installations
      ping:
      become: yes

    - name: Install Homebrew casks
      homebrew_cask: name={{ item }}
      with_items:
        - flycut
        - font-hack
        - font-sauce-code-powerline
        - font-source-code-pro
        - google-chrome
        - google-drive
        # - intellij-idea
        - iterm2
        - lastpass
        # - java
        - macvim
        # - rubymine
        - shiftit
        - sublime
        - postman

    - name: Install gi
      get_url: url=https://github.com/sgravrock/gi/releases/download/0.0.1/gi-0.0.1-macosx dest=/usr/local/bin/gi mode=0755

    - name: Create LaunchAgents dir
      file: path=~/Library/LaunchAgents state=directory
    - name: Get Postgres launch agents
      shell: ls /usr/local/opt/postgresql/*.plist
      register: postgres_launch_agents
    - name: Link Postgres launch agents
      file: src={{ item }} dest=~/Library/LaunchAgents/{{ item | basename }} state=link
      with_items: "{{ postgres_launch_agents.stdout_lines }}"

    - name: Install Rubies
      command: rbenv install {{ item }}
      args:
        creates: ~/.rbenv/versions/{{ item }}
      with_items:
        - 2.0.0-p648
        - 2.2.3
      environment:
        PATH: "/usr/local/bin:/Users/{{ ansible_env.USER }}/.rbenv/shims:{{ ansible_env.PATH }}"
    - name: Use Ruby 2.2.3
      shell: rbenv global 2.2.3 && rbenv rehash
      environment:
        PATH: "/usr/local/bin:/Users/{{ ansible_env.USER }}/.rbenv/shims:{{ ansible_env.PATH }}"
    - name: Install Ruby gems
      command: gem install bundler
      environment:
        PATH: "/usr/local/bin:/Users/{{ ansible_env.USER }}/.rbenv/shims:{{ ansible_env.PATH }}"

    - name: Install Pivotal IDE prefs
      command: ./bin/ide_prefs --ide={{ item }} install
      args:
        chdir: ~/workspace/pivotal_ide_prefs/cli
      with_items:
        - intellij
        - rubymine

    - name: Update OS X defaults
      my_defaults:
        domain: "{{ item.domain | default(omit) }}"
        key: "{{ item.key }}"
        type: "{{ item.type }}"
        value: "{{ item.value }}"
      with_items:
        - # Autohide the Dock
          domain: com.apple.dock
          key: autohide
          type: bool
          value: true
        - # Put the Dock on the left
          domain: com.apple.dock
          key: orientation
          type: string
          value: left
        - # keyboard repeat rate
          key: KeyRepeat
          type: int
          value: 1
        - # delay before keyboard repeat
          key: InitialKeyRepeat
          type: int
          value: 15
        - # Function keys are F keys
          domain: com.apple.keyboard
          key: fnState
          type: bool
          value: true
        - # Show date with time in menu bar
          domain: com.apple.menuextra.clock
          key: DateFormat
          type: string
          value: EEE MMM d  h:mm a
        - # show scissors for flycut icon
          domain: com.generalarcade.flycut
          key: menuIcon
          type: int
          value: 3

    - name: import terminal profile
      command: open ~/.dotfiles/Pivotal.terminal
    - name: set terminal profile to be the default
      my_defaults:
        domain: com.apple.Terminal
        key: "{{ item }} Window Settings"
        type: string
        value: Pivotal
      with_items:
        - Default
        - Startup

    - name: Install dockutil
      homebrew: name=dockutil
    - name: Remove all icons from the Dock
      command: dockutil --remove all
      environment:
        PATH: "/usr/local/bin:/Users/{{ ansible_env.USER }}/.rbenv/shims:{{ ansible_env.PATH }}"
    - name: Uninstall dockutil
      homebrew: name=dockutil state=absent
    - name: Restart the Dock
      command: killall Dock
      ignore_errors: yes

    - name: Set login items
      command: ~/workspace/alfalfa/bin/addLoginItem ~/Applications/{{ item }}.app
      become: yes
      become_user: "{{ ansible_env.USER }}"
      with_items:
        - Flycut
        - ShiftIt

    - name: Check if ShiftIt is enabled in Accessibility whitelist
      shell: echo "SELECT allowed FROM access WHERE client = 'org.shiftitapp.ShiftIt';" | sqlite3 /Library/Application\ Support/com.apple.TCC/TCC.db
      become: yes
      register: shiftit_out
    - name: Add ShiftIt to Accessibility whitelist
      shell: echo "INSERT INTO access VALUES('kTCCServiceAccessibility','org.shiftitapp.ShiftIt',0,1,1,NULL,NULL);" | sqlite3 /Library/Application\ Support/com.apple.TCC/TCC.db
      become: yes
      when: not shiftit_out.stdout
    - name: Enable ShiftIt in Accessiblity whitelist
      shell: echo "UPDATE access SET allowed = 1 WHERE client = 'org.shiftitapp.ShiftIt';" | sqlite3 /Library/Application\ Support/com.apple.TCC/TCC.db
      become: yes
      when: shiftit_out.stdout and shiftit_out.stdout != "1"

    - name: Start OS X apps
      shell: pgrep "{{ item.key }}" || open -a "{{ item.value }}"
      with_dict:
        ShiftIt: ShiftIt.app
        Flycut: Flycut.app
